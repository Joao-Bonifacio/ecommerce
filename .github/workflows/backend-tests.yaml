name: Backend CI

on:
  push:
    paths:
      - 'backend/**'
  pull_request:
    paths:
      - 'backend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      minio:
        image: jhowlord/minio-ci:latest
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
        options: >-
          jhowlord/minio-ci /data
          --health-cmd "curl -f http://localhost:9000/minio/health/ready || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecommerce
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5 

      mongo:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --replSet rs0
          --bind_ip_all
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    defaults:
      run:
        working-directory: backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22.16.0'

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: backend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Setup databases
      env:
        MONGODB_URL: mongodb://localhost:27017/ecommerce
        POSTGRES_URL: postgres://postgres:postgres@localhost:5432/ecommerce
        S3_BUCKET_NAME: ecommerce
        S3_ENDPOINT: http://localhost:9000
        S3_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
        S3_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      run: |
        npm run db:mongo
        npm run db:postgres
        npm run db:seed

    - name: Build backend
      run: npm run build

    - name: Run Dev Server
      env:
        APP_ENDPOINT: '*'
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
        JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
        REDIS_HOST: localhost
        REDIS_DB: 0
        REDIS_PORT: 6379
        MONGODB_URL: mongodb://localhost:27017/ecommerce
        POSTGRES_URL: postgres://postgres:postgres@localhost:5432/ecommerce
        S3_BUCKET_NAME: ecommerce
        S3_ENDPOINT: http://localhost:9000
        S3_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
        S3_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      run: npm run dev &

    - name: Run all tests
      env:
        APP_ENDPOINT: '*'
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
        JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
        REDIS_HOST: localhost
        REDIS_DB: 0
        REDIS_PORT: 6379
        MONGODB_URL: mongodb://localhost:27017/ecommerce
        POSTGRES_URL: postgres://postgres:postgres@localhost:5432/ecommerce
        S3_BUCKET_NAME: ecommerce
        S3_ENDPOINT: http://localhost:9000
        S3_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
        S3_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      run: npm run test:all
